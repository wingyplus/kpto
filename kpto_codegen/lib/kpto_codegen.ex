defmodule KptoCodegen do
  @moduledoc """
  Documentation for `KptoCodegen`.
  """

  @do_not_edit "# This code generated by `mix kpt.codegen`. PLEASE DO NOT EDIT."

  def generate(%{"definitions" => definitions}) do
    for {namespace_type, spec} <- definitions do
      module = to_module_name(namespace_type)
      {"#{Macro.underscore(extract_type(namespace_type))}.ex", to_module(module, spec)}
    end
  end

  defp to_module(module, %{"type" => "string", "title" => doc}) do
    """
    #{@do_not_edit}
    defmodule #{module} do
      @moduledoc \"\"\"
    #{doc} 
    \"\"\"

      @type t() :: String.t()
    end
    """
  end

  defp to_module(
         module,
         %{
           "type" => "object",
           "properties" => properties
         } = spec
       ) do
    doc =
      case spec do
        %{"title" => doc} -> doc
        %{"description" => doc} -> doc
      end

    [
      @do_not_edit,
      ?\n,
      """
      defmodule #{module} do
        @moduledoc \"\"\"
      #{doc}
      \"\"\"
      """,
      ?\n,
      "@type t() :: %__MODULE__{",
      ?\n,
      for {name, spec} <- properties do
        name = Macro.underscore(name)
        "#{name}: #{format_type(spec)},"
      end,
      ?\n,
      "}",
      ?\n,
      "defstruct [",
      for {name, _} <- properties do
        key =
          name
          |> Macro.underscore()
          |> atom()

        [key, ?,]
      end,
      "]",
      ?\n,
      "end"
    ]
    |> IO.iodata_to_binary()
  end

  defp atom(name), do: [~c":", name]

  defp format_type(%{"type" => "array", "items" => spec}), do: [?[, format_type(spec), ?]]
  defp format_type(%{"type" => "string"}), do: "String.t()"

  defp format_type(%{"$ref" => <<"#/definitions/", type::binary>>}),
    do: [to_module_name(type), ".t()"]

  defp format_type(%{"type" => "object", "additionalProperties" => _}) do
    "map()"
  end

  defp format_type(%{"type" => "object", "properties" => properties}) do
    [
      "%{",
      ?\n,
      for {name, spec} <- properties do
        name = Macro.underscore(name)
        "#{name}: #{format_type(spec)},"
      end,
      ?\n,
      "}"
    ]
  end

  defp extract_type(namespace_type) do
    [_dev, _kpt, _v1, type] = String.split(namespace_type, ".")
    type
  end

  defp to_module_name(namespace_type) do
    name = namespace_type |> extract_type() |> Macro.camelize()

    ["Kpto", "Api", "Kptfile", "V1", name]
    |> Module.concat()
    |> to_string()
    |> String.trim_leading("Elixir.")
  end
end
